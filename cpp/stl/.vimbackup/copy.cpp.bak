#include <iostream>
#include <vector>
#include <algorithm>

template<typename T>
void print(T elem){
    std::cout << elem << " "; 
}

int main(int argc, char* argv[])
{
	std::vector<int> data = {1, 2, 3, 4};

    std::cout << "data: " << std::endl;
    std::for_each(data.begin(), data.end(), print<int>);
    std::cout << std::endl;

	std::vector<int> result;
	result.resize(data.size());

	std::transform(data.begin(), data.end(), result.begin(), [](int elem){
		return elem * 2;
	});

    std::cout << "transform: elem*2" << std::endl;
    std::for_each(result.begin(), result.end(), print<int>);
    std::cout << std::endl;

	std::vector<int> dup;
	dup.resize(data.size());

	std::copy(data.begin(), data.end(), dup.begin());

    std::cout << "copy: " << std::endl;
    std::for_each(dup.begin(), dup.end(), print<int>);
    std::cout << std::endl;

    result.resize(dup.size());
	std::transform(dup.begin(), dup.end(), 
			data.begin(),
			result.begin(), 
			[](int elem1, int elem2){
				return elem1 * elem2;
			});

    std::cout << "transform: (elem1, elem2)" << std::endl;
    std::for_each(result.begin(), result.end(), print<int>);
    std::cout << std::endl;

	return 0;
}
